services:
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=contents_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
    ports:
      - "5432:5432"

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"

  rating-processor:
    build: .
    command: python manage.py run_rating_processor
    depends_on:
      - kafka
      - postgres
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - DATABASE_URL=postgres
      - POSTGRES_DB=contents_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      
  web:
    build: .
    command: >
      sh -c "python manage.py makemigrations contents &&
             python manage.py migrate &&
             python manage.py populate_db &&
             python manage.py collectstatic --noinput &&
             python manage.py default_superuser &&
             gunicorn --bind 0.0.0.0:8000 content_rating.wsgi:application"
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
    depends_on:
      postgres:
        condition: service_healthy
    expose:
      - "8000"
    environment:
      - DEBUG=1
      - DJANGO_SUPERUSER_USERNAME=admin
      - DJANGO_SUPERUSER_PASSWORD=admin
      - ALLOWED_HOSTS=localhost,127.0.0.1,web,192.168.142.128
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - DATABASE_URL=postgres
      - POSTGRES_DB=contents_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres

  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/usr/share/nginx/html/static
      - ./certs:/etc/nginx/certs:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

volumes:
  postgres_data:
  static_volume:
  certs:

networks:
  default:
    driver: bridge